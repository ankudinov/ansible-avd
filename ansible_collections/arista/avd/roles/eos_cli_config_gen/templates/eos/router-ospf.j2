{# eos - Router OSPF #}
{% for process_id in router_ospf.process_ids | arista.avd.natural_sort %}
!
{%     if router_ospf.process_ids[process_id].vrf is arista.avd.defined %}
router ospf {{ process_id }} vrf {{ router_ospf.process_ids[process_id].vrf }}
{%     else %}
router ospf {{ process_id }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].log_adjacency_changes_detail is arista.avd.defined(true) %}
   log-adjacency-changes detail
{%     endif %}
{%     if router_ospf.process_ids[process_id].router_id is arista.avd.defined %}
   router-id {{ router_ospf.process_ids[process_id].router_id }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].passive_interface_default is arista.avd.defined(true) %}
   passive-interface default
{%     endif %}
{%     if router_ospf.process_ids[process_id].no_passive_interfaces is arista.avd.defined %}
{%         for interface in router_ospf.process_ids[process_id].no_passive_interfaces %}
   no passive-interface {{ interface }}
{%         endfor %}
{%     endif %}
{%     for network_prefix in router_ospf.process_ids[process_id].network_prefixes | arista.avd.natural_sort %}
   network {{ network_prefix }} area {{ router_ospf.process_ids[process_id].network_prefixes[network_prefix].area }}
{%     endfor %}
{%     if router_ospf.process_ids[process_id].bfd_enable is arista.avd.defined and router_ospf.process_ids[process_id].bfd_enable %}
   bfd default
{%     endif %}
{%     if router_ospf.process_ids[process_id].max_lsa is arista.avd.defined %}
   max-lsa {{ router_ospf.process_ids[process_id].max_lsa }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].default_information_originate is defined %}
{%         set default_information_originate_cli = "default-information originate"%}
{%         if router_ospf.process_ids[process_id].default_information_originate.always is arista.avd.defined(true) %}
{%             set default_information_originate_cli = default_information_originate_cli ~ " always" %}
{%         endif %}
   {{ default_information_originate_cli }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].redistribute.static is defined %}
{%         set redistribute_static_cli = "redistribute static" %}
{%         if router_ospf.process_ids[process_id].redistribute.static.route_map is arista.avd.defined %}
{%             set redistribute_static_cli = redistribute_static_cli ~ " route-map " ~  router_ospf.process_ids[process_id].redistribute.static.route_map %}
{%         endif %}
   {{ redistribute_static_cli }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].redistribute.connected is defined %}
{%         set redistribute_connected_cli = "redistribute connected" %}
{%         if router_ospf.process_ids[process_id].redistribute.connected.route_map is arista.avd.defined %}
{%             set redistribute_connected_cli = redistribute_connected_cli ~ " route-map " ~ router_ospf.process_ids[process_id].redistribute.connected.route_map %}
{%         endif %}
   {{ redistribute_connected_cli }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].auto_cost_reference_bandwidth is arista.avd.defined %}
   auto-cost reference-bandwidth {{ router_ospf.process_ids[process_id].auto_cost_reference_bandwidth }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].maximum_paths is arista.avd.defined %}
   maximum-paths {{ router_ospf.process_ids[process_id].maximum_paths }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].max_metric.router_lsa is defined %}
{%         set max_metric_router_lsa_cli = "max-metric router-lsa" %}
{%         if router_ospf.process_ids[process_id].max_metric.router_lsa.external_lsa is defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " external-lsa" %}
{%         endif %}
{%         if router_ospf.process_ids[process_id].max_metric.router_lsa.external_lsa.override_metric is arista.avd.defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " " ~ router_ospf.process_ids[process_id].max_metric.router_lsa.external_lsa.override_metric %}
{%         endif %}
{%         if router_ospf.process_ids[process_id].max_metric.router_lsa.include_stub is arista.avd.defined(true) %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " include-stub" %}
{%         endif %}
{%         if router_ospf.process_ids[process_id].max_metric.router_lsa.on_startup is arista.avd.defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " on-startup " ~ router_ospf.process_ids[process_id].max_metric.router_lsa.on_startup %}
{%         endif %}
{%         if router_ospf.process_ids[process_id].max_metric.router_lsa.summary_lsa is defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " summary-lsa" %}
{%         endif %}
{%         if router_ospf.process_ids[process_id].max_metric.router_lsa.summary_lsa.override_metric is arista.avd.defined %}
{%             set max_metric_router_lsa_cli = max_metric_router_lsa_cli ~ " " ~ router_ospf.process_ids[process_id].max_metric.router_lsa.summary_lsa.override_metric %}
{%         endif %}
   {{ max_metric_router_lsa_cli }}
{%     endif %}
{%     if router_ospf.process_ids[process_id].mpls_ldp_sync_default is arista.avd.defined(true) %}
   mpls ldp sync default
{%     endif %}
{%     if router_ospf.process_ids[process_id].summary_addresses is arista.avd.defined %}
{%         for summary_address in router_ospf.process_ids[process_id].summary_addresses %}
{%             if summary_address.prefix is arista.avd.defined %}
{%                 if summary_address.tag is arista.avd.defined %}
   summary-address {{ summary_address.prefix }} tag {{ summary_address.tag }}
{%                 elif summary_address.attribute_map is arista.avd.defined %}
   summary-address {{ summary_address.prefix }} attribute-map {{ summary_address.attribute_map }}
{%                 elif summary_address.not_advertise is arista.avd.defined(true) %}
   summary-address {{ summary_address.prefix }} not-advertise
{%                 else %}
   summary-address {{ summary_address.prefix }}
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endif %}
{# area specific configuration #}
{%     if router_ospf.process_ids[process_id].area_specific_config is arista.avd.defined %}
{%         for ospf_area_vars in router_ospf.process_ids[process_id].area_specific_config | arista.avd.natural_sort %}
{%             set ospf_area_cli = "area " ~ ospf_area_vars.ospf_area %}
{# if stub area is configured... #}
{%             if ospf_area_vars.stub is arista.avd.defined %}
{%                 if ospf_area_vars.stub | lower == "no_summary" %}
{%                     set ospf_area_cli = ospf_area_cli ~ " stub no-summary" %}
{%                 elif ospf_area_vars.stub | lower in ("true", "on", true) %}
{%                     set ospf_area_cli = ospf_area_cli ~ " stub" %}
{%                 else %}
{# raise an error using non-existing variable and arista.avd.defined if the value is out of acceptable range #}
{%                     if non_existing_var is arista.avd.defined(
   'my_value', fail_action='error',
   var_name='Incorrect variable value. Acceptable values: true, on, no_summary. router_ospf.process_ids[process_id].area_specific_config[<index>].stub') %}
 {%                    endif %}  
{%                endif %}
{# if nssa area is configured... #}
{%            elif ospf_area_vars.nssa is arista.avd.defined %}
{# 1st, produce default-information-originate config, if defined. Otherwise use empty string.  #}
{%            set default_information_cli = '' %}
{%                if ospf_area_vars.default_information_originate is arista.avd.defined %}
{# set metric for default-information-originate #}
{%                    if ospf_area_vars.default_information_originate.metric is arista.avd.defined %}
{%                        set default_information_cli = default_information_cli ~ " metric " ~ ospf_area_vars.default_information_originate.metric %}
{%                    else %}
{%                        set default_information_cli = default_information_cli ~ " metric 1" %}
{%                    endif %}
{# set metric type for default-information-originate #}
{%                    if ospf_area_vars.default_information_originate.metric_type is arista.avd.defined %}
{%                        if ospf_area_vars.default_information_originate.metric_type in ("1", "2", 1, 2) %}
{%                            set default_information_cli = default_information_cli ~ " metric-type " ~ ospf_area_vars.default_information_originate.metric_type %}
{%                        else %}
{# raise an error using non-existing variable and arista.avd.defined if the value is out of acceptable range #}
{%                            if non_existing_var is arista.avd.defined(
   'my_value', fail_action='error',
   var_name='Incorrect variable value. Acceptable values: 1, 2. router_ospf.process_ids[process_id].area_specific_config.default_information_originate.metric_type') %}
{%                            endif %}
{%                        endif %}
{%                    else %}
{%                        set default_information_cli = default_information_cli ~ " metric-type 2" %}
{%                    endif %}
{%                endif %}
{# 2nd, produce nssa config and add default-information-originate config if not empty #}
{%                if ospf_area_vars.nssa | lower == "no_summary" %}
{%                    set ospf_area_cli = ospf_area_cli ~ " nssa no-summary" %}
{%                elif ospf_area_vars.nssa | lower == "nssa_only" %}
{%                    set ospf_area_cli = ospf_area_cli ~ " nssa" ~ default_information_cli ~ " nssa-only" %}
{%                elif ospf_area_vars.nssa | lower in ("true", true, "on") %}
{%                    set ospf_area_cli = ospf_area_cli ~ " nssa" ~ default_information_cli %}
{%                else %}
{# raise an error using non-existing variable and arista.avd.defined if the value is out of acceptable range #}
{%                    if non_existing_var is arista.avd.defined(
   'my_value', fail_action='error',
   var_name='Incorrect variable value. Acceptable values: no_summary, nssa_only, true, on. router_ospf.process_ids[process_id].area_specific_config.default_information_originate.metric_type') %}
{%                    endif %}
{%                endif %}
{%            else %}
{# raise an error using non-existing variable and arista.avd.defined if the value is out of acceptable range #}
{%                if non_existing_var is arista.avd.defined(fail_action='error',
   var_name='Incorrect variable value. Acceptable values: stub, nssa. router_ospf.process_ids[process_id].area_specific_config') %}
{%                endif %}
{%            endif %}
{# print the configuration line #}
   {{ ospf_area_cli }}
{%         endfor %}
{%     endif %}
{% endfor %}
